{"version":3,"file":"OpenCageGeocoding.dev.js","sources":["../../node_modules/opencage-api-client/dist/errors/GeocodeError.js","../../node_modules/opencage-api-client/dist/version.js","../../node_modules/opencage-api-client/dist/fetch.js","../../node_modules/opencage-api-client/dist/helpers/geocodeHelpers.js","../../node_modules/opencage-api-client/dist/opencage.js","../../src/js/geocoder.js","../../src/js/geocoding.js","../../src/js/index.js"],"sourcesContent":["class GeocodeError extends Error {\n    response;\n    status;\n    constructor(message){\n        super(message);\n        this.name = 'GeocodeError';\n    }\n}\nexport { GeocodeError };\n\n//# sourceMappingURL=GeocodeError.js.map","const version = '2.0.1';\nexport { version };\n\n//# sourceMappingURL=version.js.map","import { GeocodeError } from \"./errors/GeocodeError.js\";\nimport { version } from \"./version.js\";\nconst USER_AGENT = `OpenCageData Geocoding NodeJS API Client/${version}`;\nfunction checkFetchStatus(response) {\n    if (response.status >= 200 && response.status < 300) return response;\n    const message = response.statusText || `HTTP error ${response.status}`;\n    const error = new GeocodeError(message);\n    error.status = {\n        code: response.status,\n        message\n    };\n    error.response = response;\n    throw error;\n}\nfunction parseJSON(response) {\n    return response.json();\n}\nasync function fetchUrl(url, resolve, reject, signal) {\n    fetch(url, {\n        method: 'GET',\n        headers: {\n            'User-Agent': USER_AGENT,\n            'Content-Type': 'application/json',\n            Accept: 'application/json'\n        },\n        signal\n    }).then(checkFetchStatus).then(parseJSON).then((data)=>{\n        resolve(data);\n    }).catch((error)=>{\n        reject(error);\n    });\n}\nexport { checkFetchStatus, fetchUrl, parseJSON };\n\n//# sourceMappingURL=fetch.js.map","import { GeocodeError } from \"../errors/GeocodeError.js\";\nconst OPENCAGEDATA_JSON_URL = 'https://api.opencagedata.com/geocode/v1/json';\nfunction buildValidationError(code, message) {\n    const error = new GeocodeError(message);\n    const status = {\n        code,\n        message\n    };\n    error.status = status;\n    error.response = {\n        status\n    };\n    return error;\n}\nfunction isUndefinedOrEmpty(param) {\n    return void 0 === param || '' === param;\n}\nfunction isUndefinedOrNull(param) {\n    return null == param;\n}\nfunction buildQueryString(input) {\n    if (isUndefinedOrNull(input)) return '';\n    return Object.keys(input).map((key)=>`${encodeURIComponent(key)}=${encodeURIComponent(input[key] || '')}`).join('&');\n}\nfunction buildQuery(input, options) {\n    const query = {\n        ...input\n    };\n    let endpoint = OPENCAGEDATA_JSON_URL;\n    let missingKey = false;\n    if (isUndefinedOrEmpty(input.proxyURL) && isUndefinedOrEmpty(options?.proxyURL)) {\n        if (isUndefinedOrEmpty(input.key) && 'undefined' != typeof process) query.key = process.env.OPENCAGE_API_KEY;\n        if (isUndefinedOrEmpty(query.key)) missingKey = true;\n    } else {\n        endpoint = options?.proxyURL;\n        if (isUndefinedOrEmpty(endpoint)) endpoint = input.proxyURL;\n        delete query.proxyURL;\n    }\n    return {\n        missingKey,\n        endpoint,\n        query\n    };\n}\nexport { buildQuery, buildQueryString, buildValidationError, isUndefinedOrEmpty, isUndefinedOrNull };\n\n//# sourceMappingURL=geocodeHelpers.js.map","import { fetchUrl } from \"./fetch.js\";\nimport { buildQuery, buildQueryString, buildValidationError, isUndefinedOrNull } from \"./helpers/geocodeHelpers.js\";\nconst MISSING_OR_BAD_QUERY = 'missing or bad query';\nconst MISSING_API_KEY = 'missing API key';\nasync function geocode(input, options) {\n    return new Promise((resolve, reject)=>{\n        if (isUndefinedOrNull(input)) {\n            const error = buildValidationError(400, MISSING_OR_BAD_QUERY);\n            reject(error);\n            return;\n        }\n        const params = buildQuery(input, options);\n        if (params.missingKey) {\n            const error = buildValidationError(401, MISSING_API_KEY);\n            reject(error);\n            return;\n        }\n        const { query, endpoint } = params;\n        const qs = buildQueryString(query);\n        const url = `${endpoint}?${qs}`;\n        fetchUrl(url, resolve, reject, options?.signal);\n    });\n}\nexport { geocode };\n\n//# sourceMappingURL=opencage.js.map","import { LatLng, LatLngBounds } from 'leaflet';\nimport { geocode } from 'opencage-api-client';\n/**\n * Geocoder class for OpenCage API interactions\n */\nexport class OpenCageGeocoder {\n  constructor(options = {}) {\n    this.options = {\n      geocodingQueryParams: {},\n      key: '',\n      limit: 5,\n      ...options,\n    };\n  }\n\n  /**\n   * Geocode a query string\n   * @param {string} query - The search query\n   * @param {Function} callback - Callback function to handle results\n   * @param {Object} context - Context object (typically the control instance)\n   */\n  geocode(query, callback, context) {\n    const proximity = this._getProximity(context);\n\n    const params = {\n      q: query,\n      limit: this.options.limit,\n      key: this.options.key,\n      ...proximity,\n      ...this.options.geocodingQueryParams,\n    };\n\n    // this._makeRequest(this.options.serviceUrl, params, (data) => {\n    this._makeRequest(params, (data) => {\n      const results = this._processResults(data);\n      callback.call(context, results);\n    });\n  }\n\n  /**\n   * Reverse geocode a location\n   * @param {Object} location - Location object with lat/lng\n   * @param {number} scale - Scale parameter (unused in current implementation)\n   * @param {Function} callback - Callback function to handle results\n   * @param {Object} context - Context object\n   */\n  reverse(location, scale, callback, context) {\n    this.geocode(location, callback, context);\n  }\n\n  /**\n   * Get proximity parameter from map center\n   * @private\n   */\n  _getProximity(context) {\n    const proximity = {};\n    if (context && context._map && context._map.getCenter()) {\n      const center = context._map.getCenter();\n      proximity.proximity = center.lat + ',' + center.lng;\n    }\n    return proximity;\n  }\n\n  /**\n   * Process API results into standardized format\n   * @private\n   */\n  _processResults(data) {\n    const results = [];\n\n    for (let i = data.results.length - 1; i >= 0; i--) {\n      results[i] = {\n        name: data.results[i].formatted,\n        center: new LatLng(\n          data.results[i].geometry.lat,\n          data.results[i].geometry.lng\n        ),\n      };\n\n      if (data.results[i].bounds) {\n        results[i].bounds = new LatLngBounds(\n          [\n            data.results[i].bounds.southwest.lat,\n            data.results[i].bounds.southwest.lng,\n          ],\n          [\n            data.results[i].bounds.northeast.lat,\n            data.results[i].bounds.northeast.lng,\n          ]\n        );\n      }\n\n      if (this.options.resultExtension) {\n        this._addResultExtensions(results[i], data.results[i]);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Add result extensions based on configuration\n   * @private\n   */\n  _addResultExtensions(result, apiResult) {\n    const resultExtObj = this.options.resultExtension;\n    const resultExtKeys = Object.keys(resultExtObj);\n\n    for (let j = resultExtKeys.length - 1; j >= 0; j--) {\n      const key = resultExtKeys[j];\n      let resultAttr = apiResult;\n\n      const attrPathKeys = resultExtObj[key].split('.');\n      for (let k = 0; k < attrPathKeys.length; k++) {\n        const keypath = attrPathKeys[k];\n        if (resultAttr[keypath]) {\n          resultAttr = resultAttr[keypath];\n        } else {\n          resultAttr = undefined;\n          break;\n        }\n      }\n      result[key] = resultAttr;\n    }\n  }\n\n  /**\n   * Make JSONP request to the API\n   * @private\n   */\n  // _makeRequest(url, params, callback) {\n  _makeRequest(params, callback) {\n    geocode(params).then((data) => {\n      callback(data);\n    });\n  }\n}\n\n/**\n * Factory function for creating geocoder instances\n */\nexport function createGeocoder(options) {\n  return new OpenCageGeocoder(options);\n}\n","import L, { Control, Marker } from 'leaflet';\nimport { OpenCageGeocoder } from './geocoder.js';\nimport '../css/OpenCageGeocoding.css';\n\n/**\n * OpenCage Geocoding Control for Leaflet\n */\nexport class OpenCageGeocodingControl extends Control {\n  constructor(options = {}) {\n    super(options);\n    this.options = {\n      showResultIcons: false,\n      collapsed: true,\n      expand: 'click',\n      position: 'topright',\n      placeholder: 'Search...',\n      errorMessage: 'Nothing found.',\n      key: '',\n      onResultClick: undefined,\n      addResultToMap: true,\n      limit: 5,\n      ...options,\n    };\n\n    this._callbackId = 0;\n\n    if (!this.options.geocoder) {\n      this.options.geocoder = new OpenCageGeocoder(this.options);\n    }\n  }\n  onAdd(map) {\n    const className = 'leaflet-control-opencage-geocoding';\n    const container = L.DomUtil.create('div', className);\n    const icon = L.DomUtil.create(\n      'div',\n      'leaflet-control-opencage-geocoding-icon',\n      container\n    );\n    const form = L.DomUtil.create('form', className + '-form', container);\n    this._form = form;\n\n    this._map = map;\n    this._container = container;\n\n    const input = L.DomUtil.create('input');\n    this._input = input;\n    input.type = 'text';\n    input.placeholder = this.options.placeholder;\n\n    input.addEventListener('keydown', this._keydown.bind(this));\n\n    this._errorElement = document.createElement('div');\n    this._errorElement.className = className + '-form-no-error';\n    this._errorElement.innerHTML = this.options.errorMessage;\n\n    this._alts = L.DomUtil.create(\n      'ul',\n      className +\n        '-alternatives leaflet-control-opencage-geocoding-alternatives-minimized'\n    );\n\n    form.appendChild(input);\n    form.appendChild(this._errorElement);\n    container.appendChild(this._alts);\n\n    form.addEventListener('submit', this._geocode.bind(this));\n\n    if (this.options.collapsed) {\n      if (this.options.expand === 'click') {\n        icon.addEventListener('click', (e) => {\n          if (e.button === 0 && e.detail !== 2) {\n            this._toggle();\n          }\n        });\n      } else {\n        icon.addEventListener('mouseover', this._expand.bind(this));\n        icon.addEventListener('mouseout', this._collapse.bind(this));\n        this._map.on('movestart', this._collapse, this);\n      }\n    } else {\n      this._expand();\n    }\n\n    L.DomEvent.disableClickPropagation(container);\n\n    return container;\n  }\n\n  /**\n   * Handle geocoding results\n   */\n  _geocodeResult(results) {\n    this._container.classList.remove(\n      'leaflet-control-opencage-geocoding-spinner'\n    );\n\n    if (results.length === 1) {\n      this._geocodeResultSelected(results[0]);\n    } else if (results.length > 0) {\n      this._alts.innerHTML = '';\n      this._results = results;\n      this._alts.classList.remove(\n        'leaflet-control-opencage-geocoding-alternatives-minimized'\n      );\n      for (let i = 0; i < results.length; i++) {\n        this._alts.appendChild(this._createAlt(results[i], i));\n      }\n    } else {\n      this._errorElement.classList.add(\n        'leaflet-control-opencage-geocoding-error'\n      );\n    }\n  }\n\n  /**\n   * Mark geocode result on map\n   */\n  markGeocode(result) {\n    if (result.bounds) {\n      // console.log(`fit bounds`, result.bounds);\n      this._map.fitBounds(result.bounds);\n    } else {\n      // console.log(`pan to`, result.center);\n      this._map.panTo(result.center);\n    }\n\n    if (this._geocodeMarker) {\n      this._map.removeLayer(this._geocodeMarker);\n    }\n\n    this._geocodeMarker = new Marker(result.center)\n      .bindPopup(result.name)\n      .addTo(this._map)\n      .openPopup();\n\n    return this;\n  }\n\n  /**\n   * Perform geocoding\n   */\n  _geocode(event) {\n    L.DomEvent.preventDefault(event);\n\n    this._container.classList.add('leaflet-control-opencage-geocoding-spinner');\n    // this.classList.add('leaflet-control-opencage-geocoding-spinner');\n    this._clearResults();\n    this.options.geocoder.geocode(this._input.value, this._geocodeResult, this);\n\n    return false;\n  }\n\n  /**\n   * Handle selected geocoding result\n   */\n  _geocodeResultSelected(result) {\n    if (this.options.collapsed) {\n      this._collapse();\n    } else {\n      this._clearResults();\n    }\n\n    if (\n      this.options.onResultClick &&\n      typeof this.options.onResultClick === 'function'\n    ) {\n      this.options.onResultClick(result);\n    }\n\n    if (this.options.addResultToMap) {\n      this.markGeocode(result);\n    }\n  }\n\n  /**\n   * Toggle control expansion\n   */\n  _toggle() {\n    if (\n      this._container.className.indexOf(\n        'leaflet-control-opencage-geocoding-expanded'\n      ) >= 0\n    ) {\n      this._collapse();\n    } else {\n      this._expand();\n    }\n  }\n\n  /**\n   * Expand the control\n   */\n  _expand() {\n    this._container.classList.add(\n      'leaflet-control-opencage-geocoding-expanded'\n    );\n    this._input.select();\n  }\n\n  /**\n   * Collapse the control\n   */\n  _collapse() {\n    this._container.className = this._container.className.replace(\n      ' leaflet-control-opencage-geocoding-expanded',\n      ''\n    );\n    this._alts.classList.add(\n      'leaflet-control-opencage-geocoding-alternatives-minimized'\n    );\n    this._errorElement.classList.remove(\n      'leaflet-control-opencage-geocoding-error'\n    );\n  }\n\n  /**\n   * Clear results display\n   */\n  _clearResults() {\n    this._alts.classList.add(\n      'leaflet-control-opencage-geocoding-alternatives-minimized'\n    );\n    this._selection = null;\n    this._errorElement.classList.remove(\n      'leaflet-control-opencage-geocoding-error'\n    );\n  }\n\n  /**\n   * Create alternative result element\n   */\n  _createAlt(result, index) {\n    const li = document.createElement('li');\n    li.innerHTML =\n      '<a href=\"#\" data-result-index=\"' +\n      index +\n      '\">' +\n      (this.options.showResultIcons && result.icon\n        ? '<img src=\"' + result.icon + '\"/>'\n        : '') +\n      result.name +\n      '</a>';\n\n    // L.DomEvent.addListener(\n    li.addEventListener('click', () => {\n      this._geocodeResultSelected(result);\n    });\n\n    return li;\n  }\n\n  /**\n   * Handle keyboard navigation\n   */\n  _keydown(e) {\n    const select = (dir) => {\n      if (this._selection) {\n        this._selection.firstChild.classList.remove(\n          'leaflet-control-opencage-geocoding-selected'\n        );\n        this._selection =\n          this._selection[dir > 0 ? 'nextSibling' : 'previousSibling'];\n      }\n\n      if (!this._selection) {\n        this._selection = this._alts[dir > 0 ? 'firstChild' : 'lastChild'];\n      }\n\n      if (this._selection) {\n        this._selection.firstChild.classList.add(\n          'leaflet-control-opencage-geocoding-selected'\n        );\n      }\n    };\n\n    switch (e.keyCode) {\n      case 38: // Up\n        select(-1);\n        L.DomEvent.preventDefault(e);\n        break;\n      case 40: // Down\n        select(1);\n        L.DomEvent.preventDefault(e);\n        break;\n      case 13: // Enter\n        if (this._selection) {\n          const index = parseInt(\n            this._selection.firstChild.getAttribute('data-result-index'),\n            10\n          );\n          this._geocodeResultSelected(this._results[index]);\n          this._clearResults();\n          L.DomEvent.preventDefault(e);\n        }\n        break;\n    }\n    return true;\n  }\n}\n","import { OpenCageGeocoder } from './geocoder.js';\nimport { OpenCageGeocodingControl } from './geocoding.js';\n\nconst OpenCageGeocoding = OpenCageGeocodingControl;\n// Factory function for backwards compatibility\nconst openCageGeocoding = (options) => {\n  return new OpenCageGeocodingControl(options);\n};\n\n// Attach geocoder to the control class\nOpenCageGeocodingControl.Geocoder = OpenCageGeocoder;\nOpenCageGeocodingControl.geocoder = (options) => {\n  return new OpenCageGeocoder(options);\n};\n\n// TODO: decide if we want to attach to L.Control or not\n// Attach to L.Control for global usage\nObject.assign(L.Control, {\n  OpenCageGeocoding: OpenCageGeocodingControl,\n  openCageGeocoding: openCageGeocoding,\n});\n\n// Export for ES modules\nexport { OpenCageGeocoder, openCageGeocoding, OpenCageGeocoding };\nexport default OpenCageGeocodingControl;\n"],"names":["LatLng","LatLngBounds","Control","L","Marker"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}